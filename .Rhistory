, auto_reload = F
, default_file = 'test.Rmd'
, shiny_args  = list( launch.browser = T)
, render_args = list( params = list( data = mtcars
, data_input = F
)
)
)
rmarkdown::run(file = 'test.Rmd'
, dir = "C:/Users/erbla/OneDrive/R/multiview shiny"
, auto_reload = F
, default_file = 'test.Rmd'
, shiny_args  = list( launch.browser = T)
, render_args = list( params = list( data = mtcars
, data_input = F
)
)
)
rmarkdown::run(file = 'multiview_v04.Rmd'
, dir = "C:/Users/erbla/OneDrive/R/multiview shiny"
, auto_reload = F
, default_file = 'test.Rmd'
, shiny_args  = list( launch.browser = T)
, render_args = list( params = list( data = mtcars
, data_input = F
)
)
)
rmarkdown::run(file = 'multiview_v04.Rmd'
, dir = "C:/Users/erbla/OneDrive/R/multiview shiny"
, auto_reload = F
, default_file = 'multiview_v04.Rmd'
, shiny_args  = list( launch.browser = T)
, render_args = list( params = list( data = mtcars
, data_input = F
)
)
)
rmarkdown::run(file = 'multiview_v04.Rmd'
, dir = "C:/Users/erbla/OneDrive/R/multiview shiny"
, auto_reload = F
, default_file = 'multiview_v04.Rmd'
, shiny_args  = list( launch.browser = T)
, render_args = list( params = list( data = mtcars
, data_input = F
)
)
)
rmarkdown::run(file = 'multiview_v04.Rmd'
, dir = "C:/Users/erbla/OneDrive/R/multiview shiny"
, auto_reload = F
, default_file = 'multiview_v04.Rmd'
, shiny_args  = list( launch.browser = T)
, render_args = list( params = list( data = mtcars
, data_input = F
)
)
)
rmarkdown::run(file = 'multiview_v04.Rmd'
, dir = "C:/Users/erbla/OneDrive/R/multiview shiny"
, auto_reload = F
, default_file = 'multiview_v04.Rmd'
, shiny_args  = list( launch.browser = T)
, render_args = list( params = list( data = mtcars
, data_input = F
)
)
)
rmarkdown::run(file = 'multiview_v04.Rmd'
, dir = "C:/Users/erbla/OneDrive/R/multiview shiny"
, auto_reload = F
, default_file = 'multiview_v04.Rmd'
, shiny_args  = list( launch.browser = T)
, render_args = list( params = list( data = mtcars
, data_input = F
)
)
)
rmarkdown::run(file = 'multiview_v04.Rmd'
, dir = "C:/Users/erbla/OneDrive/R/multiview shiny"
, auto_reload = F
, default_file = 'multiview_v04.Rmd'
, shiny_args  = list( launch.browser = T)
, render_args = list( params = list( data = mtcars
, data_input = F
)
)
)
rmarkdown::run(file = 'multiview_v04.Rmd'
, dir = "C:/Users/erbla/OneDrive/R/multiview shiny"
, auto_reload = F
, default_file = 'multiview_v04.Rmd'
, shiny_args  = list( launch.browser = T)
, render_args = list( params = list( data = ISLR::Auto
, data_input = F
)
)
)
head(ISLR::AUto,5)
head(ISLR::Auto,5)
rmarkdown::run(file = 'multiview_v04.Rmd'
, dir = "C:/Users/erbla/OneDrive/R/multiview shiny"
, auto_reload = F
, default_file = 'multiview_v04.Rmd'
, shiny_args  = list( launch.browser = T)
, render_args = list( params = list( data = ISLR::Auto
, data_input = F
)
)
)
?shiny::eventReactive
getwd
getwd()
knitr::opts_chunk$set(echo = F, warning = F, message = F, eval = T)
source( stringr::str_c(getwd(),'/modules/mod_load_data v01.R')
source('C:/Users/erbla/OneDrive/R/multiview shiny/modules/mod_summary v01.R')
source( stringr::str_c(getwd(),'/modules/mod_load_data v01.R') )
stringr::str_c(getwd(),'mod_load_data v01.R')
stringr::str_c(getwd(),'/mod_load_data v01.R')
require(shiny)
?withProgress()
?shiny::need
a = 'a'
b = 'b'
print(a,b)
?reactive
?shiny::reactive
?renderPlot
require(shiny)
?renderPlot
?plotOutput
require(tidyverse)
require(tidyverse)
require(shiny)
rmarkdown::run(file = 'multiview_v07.Rmd'
, dir = "C:/Users/erbla/OneDrive/R/multiview shiny"
, auto_reload = F
, default_file = 'multiview_v07.Rmd'
, shiny_args  = list( launch.browser = T)
, render_args = list( params = list( data = ISLR::Auto
, data_input = F
)
)
)
rmarkdown::run(file = 'multiview_v07.Rmd'
#, dir = "C:/Users/erbla/OneDrive/R/multiview shiny"
, auto_reload = F
, default_file = 'multiview_v07.Rmd'
, shiny_args  = list( launch.browser = T)
, render_args = list( params = list( data = ISLR::Auto
, data_input = F
)
)
)
rmarkdown::run(file = 'multiview_v07.Rmd'
#, dir = "C:/Users/erbla/OneDrive/R/multiview shiny"
, auto_reload = F
, default_file = 'multiview_v07.Rmd'
, shiny_args  = list( launch.browser = T)
, render_args = list( params = list( data = ISLR::Auto
, data_input = F
)
)
)
rmarkdown::run(file = 'multiview_v07.Rmd'
#, dir = "C:/Users/erbla/OneDrive/R/multiview shiny"
, auto_reload = F
, default_file = 'multiview_v07.Rmd'
, shiny_args  = list( launch.browser = T)
, render_args = list( params = list( data = ISLR::Auto
, data_input = FALSE
)
)
)
?rpart:::predict.rpart()
?rpart:::predict.rpart
m = rpart::rpart(cyl~., data = mtcars)
predict(t, mtcars)
predict(m, mtcars)
data = mtcars
data$cyl = as.factor(data$cyl)
m = rpart::rpart(cyl~., data = data)
predict(m, data)
m = rpart::rpart(cyl~., data = data, type = 'class')
predict(m, data, type = 'class')
predict(m, data, type = 'vector')
data$pred = predict(m, data, type = 'vector')
data
data$pred = predict(m, data, type = 'class')
dat
data
data= pred %>%
group_by_(input$group_tree, 'pred')%>%
summarize( count = n() )
require(tidyverse)
data= pred %>%
group_by_(input$group_tree, 'pred')%>%
summarize( count = n() )
data= data %>%
group_by_(input$group_tree, 'pred')%>%
summarize( count = n() )
data= data %>%
group_by_('cyl', 'pred')%>%
summarize( count = n() )
data
data = mtcars
data$pred  = predict(m, data, type = 'class')
table = data %>%
group_by_('cyl', 'pred')%>%
summarize( count = n() )%>%
ungroup() %>%
summarize( perc = count/n() )
group_var = input$
data$pred  = predict(m, data, type = 'class')
group_var = input$
data$pred  = predict(m, data, type = 'class')
m = rpart::rpart(cyl~., data = data, type = 'class')
m = rpart::rpart(cyl~., data = data)
group_var = input$
data$pred  = predict(m, data, type = 'class')
data = mtcars
data$pred  = predict(m, data, type = 'class')
data$pred  = predict(m, data, type = 'class')
data
predict(m, data, type = 'class')
m = rpart::rpart(cyl~., data )
data$pred  = predict(m, data, type = 'class')
predict(m, data, type = 'class')
t
data$pred  = predict(m, data)
data
data$cyl = as.factor(data$cyl)
m = rpart::rpart(cyl~., data )
data$pred  = predict(m, data, type = 'class')
table = data %>%
group_by_('cyl', 'pred')%>%
summarize( count = n() )%>%
ungroup() %>%
summarize( perc = count/n() )
table = data %>%
group_by_('cyl', 'pred')%>%
summarize( count = n() )%>%
ungroup()
table = data %>%
group_by_('cyl', 'pred')%>%
summarize( count = n() )%>%
ungroup() %>%
summarize( perc = count/sum(count) * 100 )
View(table)
table = data %>%
group_by_('cyl', 'pred')%>%
summarize( count = n() )%>%
ungroup() %>%
summarize( perc = count/sum(count) * 100 )
View(table)
table = data %>%
group_by_('cyl', 'pred')%>%
summarize( count = n() )%>%
ungroup() %>%
mutate( perc = count/sum(count) * 100 )
View(table)
table = data %>%
group_by_('cyl', 'pred')%>%
summarize( count = n() )%>%
ungroup() %>%
mutate( perc = count/sum(count) * 100 %>% round(1) )
View(table)
table = data %>%
group_by_('cyl', 'pred')%>%
summarize( count = n() )%>%
ungroup() %>%
mutate( perc = count/sum(count) * 100 %>% round(1) )
table
table = data %>%
group_by_('cyl', 'pred')%>%
summarize( count = n() )%>%
ungroup() %>%
mutate( perc = (count/sum(count) * 100) %>% round(1) )
table = data %>%
group_by_('cyl', 'pred')%>%
summarize( count = n() )%>%
ungroup() %>%
mutate( perc = count/sum(count) * 100
perc = round(1) )
table = data %>%
group_by_('cyl', 'pred')%>%
summarize( count = n() )%>%
ungroup() %>%
mutate( perc = count/sum(count) * 100
, perc = round(perc, 1) )
table
auc = nrow( data[, data$pred == data[, group_var]] )/ nrow(data)
group_var = 'cyl'
auc = nrow( data[, data$pred == data[, group_var]] )/ nrow(data)
data
data[, group_var]
data$pred
data$pred == data[, group_var]
data[, data$pred == data[, group_var]]
data[, data$pred == data[, group_var]]
table(data$pred, data[, group_var])
?table
predicted  = data$pred
effective  = data[, group_var]
table(predicted, effective)
t = table(predicted, effective)
as.data.frame(t)
t = table(predicted, effective)
t
t = table(predicted, effective)
t
as.data.frame(t)
table(as.data.frame(t))
as.table(as.data.frame(t))
source(f_classification)
source('f_classification_v01.R')
type_of( data$cyl )
is.factor(data$cyl)
is.factor(data[,group_var]
! is.factor(data[,group_var])
is.factor(data[,group_var])
m
data$pred  = predict(m, newdata = data, type = 'class')
data = mtcatrs
data = mtcars
m = rpart::rpart(cyl~., data )
data$pred  = predict(m, newdata = data, type = 'class')
data$pred  = predict(m, data, type = 'class')
predict(m, data, type = 'class')
predict(m, data )
mtcars[['cyl']]
data$pred = predict(m, data, type = 'prob')
m = rpart::rpart(cyl~., data)
predict(m, data)
predict(m, data, type = 'class')
predict(m, data = data, type = 'class')
?rpart:::pred.rpart
?rpart:::predict.rpart
data$cyl = as.factor(data$cyl)
m = rpart::rpart(cyl~., data)
predict( m, data, type = 'class')
data$pred_class = predict( m, data, type = 'class')
data$pred_prob = predict( m, data, type = 'prob')
f_get_auc(data$pred_prob, data$cyl)
f_get_auc(data$pred_class, data$cyl)
f_get_auc( as.numeric(data$pred_class), data$cyl)
source('f_classification_v02.R')
source('f_classification_v02.R')
?ROCR::prediction
data = ISLR::OJ
m = rpart::rpart(Purchase~., data)
pred = predict(m, data, type = 'prob')
pred
pred = predict(m, data, type = 'prob')[,2]
top(pred)
head(pred)
f_get_rocr_auc(pred, data$Purchase)
levels(data$Purchase)
as.numeric(data$Purchase)
f_get_rocr_auc = function(pred, test, plot_rocr = F) {
# pred = pred %>%
#   as.vector() %>%
#   as.numeric()
#
# test = test %>%
#   as.vector() %>%
#   as.numeric()
pr = ROCR::prediction( pred, test )
if(plot_rocr == T){
p =  ROCR::performance( pr, measure='tpr', x.measure = 'fpr')
ROCR::plot(p)
}
p = ROCR::performance( pr, measure='auc')
return( p@y.values[[1]] )
}
f_rocr_cost = function(test, pred){
# a wrapper for f_get_rocr_auc to use as a cost function for
# e1071::tune().
# the arguments come in in reverse
auc = f_get_rocr_auc( pred, test )
print( paste('ROCR AUC during 1 CV:', auc))
return(  1 - auc )
}
f_wr_predict_random_forest = function( m, data){
pred = randomForest:::predict.randomForest( m, data, type = 'prob')[,2]
#print(head(pred))
return(pred)
}
f_tree_binary_classification_vis = function(data, formula, prune_cp = NULL, tweak = 2){
pred_var = as.character(formula)[2]
m = rpart::rpart(formula = formula, data = data)
prune_df = tibble( complexity = m$cptable[,1]
, cv_error = m$cptable[,4]
, nsplit   = m$cptable[,2])
print(prune_df)
p = prune_df %>%
gather( key = 'key', value = 'value', complexity, cv_error) %>%
ggplot( aes(x = nsplit, y = value) ) +
geom_line()+
geom_point()+
facet_wrap(~key, ncol = 1,scales = 'free_y')
print(p)
if(!is.null(prune_cp)){
m = rpart::prune( m, cp = prune_cp)
}
print(m)
rpart.plot::prp(m
#, branch.type   = 5
, box.palette   ="RdYlGn"
, faclen        = 0
, extra         = 106
, fallen.leaves = F
, under         = T
, tweak = tweak
)
#  type = 'prob' returns a dataframe with one column for each level
#  we have to index to get columns for prediction = 1
predicted_prob  = predict(m, data, type = 'prob')[,2]
predicted_class = predict(m, data, type = 'class')
test      = data[[pred_var]]
table( predicted_class, test ) %>%
print()
auc = f_get_rocr_auc( predicted_prob, test, plot_rocr = T)
print( paste('ROCR AUC:', auc))
}
f_random_forest_vis = function(data, formula, cv = 10){
pred_var = as.character(formula)[2]
# cross validate random forest
t = e1071::tune( randomForest::randomForest
, f
, data = data
, tunecontrol = e1071::tune.control(sampling = "cross"
, cross = cv
, error.fun = f_rocr_cost
)
, predict.func = f_wr_predict_random_forest
)
#print auc and sample method of cross validation
print( t$sampling )
print( paste('ROCR AUC Cross-validated:', 1 - t$best.performance))
# get best model
m = t$best.model
# test on whole dataset
predicted_prob  = predict(m, data, type = 'prob')[,2]
predicted_class = predict(m, data, type = 'class')
test      = data[[pred_var]]
#contingency table
table( predicted_class, test ) %>%
print()
#auc
auc = f_get_rocr_auc( predicted_prob, test, plot_rocr = T)
print( paste('ROCR AUC not validated:', auc))
#variable importance
imp = tibble( mean_decrease_gini = m$importance[,1]
,variable = names(m$importance[,1]) ) %>%
arrange(desc(mean_decrease_gini))
p = ggplot(imp, aes(  x    = fct_reorder(   variable
, mean_decrease_gini)
, y    = mean_decrease_gini
)
)+
geom_col( aes(fill = fct_reorder(  variable
, mean_decrease_gini
, .desc = T))
, show.legend = F)+
coord_flip()
print(p)
print(imp)
}
f_get_rocr_auc(pred, data$Purchase)
?shiny::observe
source( stringr::str_c(getwd(), '/mod_clean_data v03.R') )
rmarkdown::run(file = 'mod_tree.Rmd'
#, dir = "C:/Users/erbla/OneDrive/R/multiview shiny"
, auto_reload = F
, default_file = 'mod_tree.Rmd'
, shiny_args  = list( launch.browser = T)
, render_args = list( params = list( data = ISLR::Auto
)
)
)
f_call_multiview = function(data = ISLR::OJ){
rmarkdown::run(file = 'multiview_v07.Rmd'
#, dir = "C:/Users/erbla/OneDrive/R/multiview shiny"
, auto_reload = F
, default_file = 'multiview_v07.Rmd'
, shiny_args  = list( launch.browser = T)
, render_args = list( params = list( data = data
, data_input = FALSE
)
)
)
}
f_call_tree = function(data = ISLR::OJ){
rmarkdown::run(file = 'mod_tree.Rmd'
#, dir = "C:/Users/erbla/OneDrive/R/multiview shiny"
, auto_reload = F
, default_file = 'mod_tree.Rmd'
, shiny_args  = list( launch.browser = T)
, render_args = list( params = list( data = data
)
)
)
}
f_call_tree()
source( stringr::str_c(getwd(),'/mod_load_data v03.R') )
source( stringr::str_c(getwd(),'/mod_summary v02.R') )
source( stringr::str_c(getwd(), '/mod_clean_data v05.R') )
source( stringr::str_c(getwd(), '/mod_vis_groups_v02.R') )
source( stringr::str_c(getwd(), '/mod_tree_v02.R') )
source( stringr::str_c(getwd(), '/mod_tree_v02.R') )
source( stringr::str_c(getwd(), '/mod_save_v01.R') )
